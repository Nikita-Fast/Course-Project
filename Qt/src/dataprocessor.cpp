#include "dataprocessor.h"

#include <cmath>

#include "QtDebug"
#include "StrictRingBuffer.h"
#include "firfilter.h"

// double imp_resp[] = {
//    -0.001297449673640811,-0.0002766583475960106,-0.0003051365475834003,-0.000334783580098556,-0.00036564353778645797,-0.00039764775212865693,-0.0004308374552686771,-0.0004650739000630239,-0.0005004062650949322,-0.0005366288562195519,-0.0005737143269438651,-0.0006114755103293849,-0.0006497864675360278,-0.000688517674825909,-0.0007275737786558938,-0.0007667668280418203,-0.00080616938641145,-0.0008455475812299606,-0.0008848574909552676,-0.0009238024635857339,-0.0009622290689039907,-0.000999625880864409,-0.0010359779979025507,-0.0010708304772712714,-0.001104615027196392,-0.0011369962543423427,-0.0011683393697872447,-0.0011973287182430634,-0.0012236644853058298,-0.0012460629337352818,-0.0012695906026450243,-0.0012873388041345218,-0.0013023964166739464,-0.001314674802328091,-0.001322596772957099,-0.001327134670966246,-0.0013271636935573423,-0.0013231540713713019,-0.0013142719007204675,-0.0013007889120689982,-0.001281920826765557,-0.0012579530090180814,-0.0012281291472338047,-0.0011927655278357026,-0.0011512797070601902,-0.001103790898923458,-0.0010498205246133234,-0.0009894450183410225,-0.0009220951151456765,-0.0008478995279792593,-0.0007664990085996855,-0.0006780168462520045,-0.0005821739466606515,-0.00047886986902190905,-0.0003677931095074481,-0.0002489559645124226,-0.00012243966670253146,1.164246263391022e-05,0.00015361252114901654,0.0003040797869286675,0.000461741512956216,0.0006274740248694258,0.0008014175801794741,0.0009826328390883565,0.0011720082401606643,0.0013686412596361146,0.0015730791553101504,0.0017846670564545598,0.0020037604214812863,0.0022296834324255256,0.0024627798885406256,0.0027022478770158454,0.0029484477543175523,0.0032006393158643125,0.0034589440697550366,0.0037227852109266418,0.00399216288730532,0.004266326030751371,0.0045453291351262035,0.00482850994010843,0.005115838393855343,0.005406647265545278,0.005700718081187691,0.005997357715412633,0.006296402729438349,0.006597253830381489,0.006899693549712545,0.00720286391309217,0.0075065058870244705,0.007810306963437761,0.008113551269840764,0.008415541819467076,0.008716430264799785,0.00901489545551906,0.009311184338334253,0.009604149149735303,0.009893792850033443,0.010179126941047369,0.010460129609628928,0.010735771701288341,0.011006171010689387,0.011270187748830218,0.011527920750045292,0.011778446910241642,0.012021562149820777,0.012256567700991457,0.012483408830404889,0.012701226914472178,0.012909963265334133,0.01310888252795289,0.013297922542479326,0.013476444904347695,0.0136443836576757,0.013801103122995035,0.01394658000449768,0.014080230261150134,0.014202173679213276,0.014311763869306843,0.014409018689084365,0.0144936641539071,0.014565764619655289,0.014624653676856711,0.014670903108908897,0.014703714252444643,0.014723645263155578,0.014730135900300095,0.014723645263155578,0.014703714252444643,0.014670903108908897,0.014624653676856711,0.014565764619655289,0.0144936641539071,0.014409018689084365,0.014311763869306843,0.014202173679213276,0.014080230261150134,0.01394658000449768,0.013801103122995035,0.0136443836576757,0.013476444904347695,0.013297922542479326,0.01310888252795289,0.012909963265334133,0.012701226914472178,0.012483408830404889,0.012256567700991457,0.012021562149820777,0.011778446910241642,0.011527920750045292,0.011270187748830218,0.011006171010689387,0.010735771701288341,0.010460129609628928,0.010179126941047369,0.009893792850033443,0.009604149149735303,0.009311184338334253,0.00901489545551906,0.008716430264799785,0.008415541819467076,0.008113551269840764,0.007810306963437761,0.0075065058870244705,0.00720286391309217,0.006899693549712545,0.006597253830381489,0.006296402729438349,0.005997357715412633,0.005700718081187691,0.005406647265545278,0.005115838393855343,0.00482850994010843,0.0045453291351262035,0.004266326030751371,0.00399216288730532,0.0037227852109266418,0.0034589440697550366,0.0032006393158643125,0.0029484477543175523,0.0027022478770158454,0.0024627798885406256,0.0022296834324255256,0.0020037604214812863,0.0017846670564545598,0.0015730791553101504,0.0013686412596361146,0.0011720082401606643,0.0009826328390883565,0.0008014175801794741,0.0006274740248694258,0.000461741512956216,0.0003040797869286675,0.00015361252114901654,1.164246263391022e-05,-0.00012243966670253146,-0.0002489559645124226,-0.0003677931095074481,-0.00047886986902190905,-0.0005821739466606515,-0.0006780168462520045,-0.0007664990085996855,-0.0008478995279792593,-0.0009220951151456765,-0.0009894450183410225,-0.0010498205246133234,-0.001103790898923458,-0.0011512797070601902,-0.0011927655278357026,-0.0012281291472338047,-0.0012579530090180814,-0.001281920826765557,-0.0013007889120689982,-0.0013142719007204675,-0.0013231540713713019,-0.0013271636935573423,-0.001327134670966246,-0.001322596772957099,-0.001314674802328091,-0.0013023964166739464,-0.0012873388041345218,-0.0012695906026450243,-0.0012460629337352818,-0.0012236644853058298,-0.0011973287182430634,-0.0011683393697872447,-0.0011369962543423427,-0.001104615027196392,-0.0010708304772712714,-0.0010359779979025507,-0.000999625880864409,-0.0009622290689039907,-0.0009238024635857339,-0.0008848574909552676,-0.0008455475812299606,-0.00080616938641145,-0.0007667668280418203,-0.0007275737786558938,-0.000688517674825909,-0.0006497864675360278,-0.0006114755103293849,-0.0005737143269438651,-0.0005366288562195519,-0.0005004062650949322,-0.0004650739000630239,-0.0004308374552686771,-0.00039764775212865693,-0.00036564353778645797,-0.000334783580098556,-0.0003051365475834003,-0.0002766583475960106,-0.001297449673640811
//};
// FIRFilter low_pass(imp_resp, 251);

// double interpol_imp_resp[] = {
//    -3.759476365311686e-05,0.005268192337562809,0.0007182983870192952,0.0005912973826092432,0.00040658073928155863,0.00015301830864890978,-0.000139793754350268,-0.0004329187871708464,-0.0006852351063932946,-0.0008584031646870955,-0.0009231969692232867,-0.000863454786799137,-0.0006794842337404694,-0.00038889833755118583,-2.5656220522726083e-05,0.00036391349513952204,0.0007268445640670394,0.0010108078546019418,0.0011713314943494536,0.0011785444703168834,0.0010221583018193096,0.0007142236235578088,0.0002887305516681905,-0.0002018442285507201,-0.0006929191815742845,-0.0011161327208649447,-0.0014087264117113004,-0.0015226005704052027,-0.001431876336036019,-0.0011377000935816057,-0.0006695680759743721,-8.276045904551895e-05,0.0005479055850704681,0.0011373965576283703,0.0016017250464046774,0.0018696878310611002,0.001893461115598351,0.0016564984451164669,0.0011775415330924361,0.0005099174260997122,-0.0002639823277588629,-0.0010426205868510577,-0.001718360652539248,-0.0021921227862522607,-0.002387579929147108,-0.00226307192796806,-0.0018191856774958054,-0.0011008767745672712,-0.00019330907584222477,0.0007878846106168571,0.0017111217273574465,0.0024460198577776586,0.002881537629347557,0.0029420687571689768,0.0025997948780547685,0.0018806219983478754,0.0008638310243902536,-0.0003260021995170606,-0.001532806220257969,-0.002589809747273952,-0.0033420820887194547,-0.0036719213173969935,-0.00351322202941894,-0.0028706819733494635,-0.0017796436584940954,-0.00039751744281835583,0.0011158806917786336,0.00255526927704712,0.003719211996755638,0.0044319185525406295,0.004570767473610435,0.004085342466313297,0.003008916860401157,0.0014574719475613203,-0.0003814641075290516,-0.002270742583622332,-0.003952818610001099,-0.005184054291520768,-0.005768800724597691,-0.005589121061300607,-0.004625160408605112,-0.002963502929603491,-0.0007914047289746712,0.0016227149792621485,0.00396106370983153,0.005896702689345943,0.007137497870555075,0.007467880906398106,0.006782916801676987,0.005109543127194989,0.002611496866531794,-0.00042386127176502627,-0.0036160849243707556,-0.006536609751914674,-0.008763046723541727,-0.009936319323159505,-0.009813349703904017,-0.008308140938873538,-0.005515150426908402,-0.0017107258876851027,0.002669022082152098,0.007072764321963426,0.010896738357107336,0.013559192382227631,0.01457784014925914,0.013641099329994678,0.010663892285317313,0.005820476175328886,-0.00045136841038047375,-0.007476941530844217,-0.014401126289064812,-0.020269660835407828,-0.02412766340519384,-0.025124802242988086,-0.02261619258192281,-0.016246823840761572,-0.006009972818972476,0.0077287651410218134,0.024244412528374084,0.042503583990918935,0.0612478866947095,0.0791048465547584,0.09471260922689786,0.10684986227826647,0.11454681040434173,0.11718822267536896,0.11454681040434173,0.10684986227826647,0.09471260922689786,0.0791048465547584,0.0612478866947095,0.042503583990918935,0.024244412528374084,0.0077287651410218134,-0.006009972818972476,-0.016246823840761572,-0.02261619258192281,-0.025124802242988086,-0.02412766340519384,-0.020269660835407828,-0.014401126289064812,-0.007476941530844217,-0.00045136841038047375,0.005820476175328886,0.010663892285317313,0.013641099329994678,0.01457784014925914,0.013559192382227631,0.010896738357107336,0.007072764321963426,0.002669022082152098,-0.0017107258876851027,-0.005515150426908402,-0.008308140938873538,-0.009813349703904017,-0.009936319323159505,-0.008763046723541727,-0.006536609751914674,-0.0036160849243707556,-0.00042386127176502627,0.002611496866531794,0.005109543127194989,0.006782916801676987,0.007467880906398106,0.007137497870555075,0.005896702689345943,0.00396106370983153,0.0016227149792621485,-0.0007914047289746712,-0.002963502929603491,-0.004625160408605112,-0.005589121061300607,-0.005768800724597691,-0.005184054291520768,-0.003952818610001099,-0.002270742583622332,-0.0003814641075290516,0.0014574719475613203,0.003008916860401157,0.004085342466313297,0.004570767473610435,0.0044319185525406295,0.003719211996755638,0.00255526927704712,0.0011158806917786336,-0.00039751744281835583,-0.0017796436584940954,-0.0028706819733494635,-0.00351322202941894,-0.0036719213173969935,-0.0033420820887194547,-0.002589809747273952,-0.001532806220257969,-0.0003260021995170606,0.0008638310243902536,0.0018806219983478754,0.0025997948780547685,0.0029420687571689768,0.002881537629347557,0.0024460198577776586,0.0017111217273574465,0.0007878846106168571,-0.00019330907584222477,-0.0011008767745672712,-0.0018191856774958054,-0.00226307192796806,-0.002387579929147108,-0.0021921227862522607,-0.001718360652539248,-0.0010426205868510577,-0.0002639823277588629,0.0005099174260997122,0.0011775415330924361,0.0016564984451164669,0.001893461115598351,0.0018696878310611002,0.0016017250464046774,0.0011373965576283703,0.0005479055850704681,-8.276045904551895e-05,-0.0006695680759743721,-0.0011377000935816057,-0.001431876336036019,-0.0015226005704052027,-0.0014087264117113004,-0.0011161327208649447,-0.0006929191815742845,-0.0002018442285507201,0.0002887305516681905,0.0007142236235578088,0.0010221583018193096,0.0011785444703168834,0.0011713314943494536,0.0010108078546019418,0.0007268445640670394,0.00036391349513952204,-2.5656220522726083e-05,-0.00038889833755118583,-0.0006794842337404694,-0.000863454786799137,-0.0009231969692232867,-0.0008584031646870955,-0.0006852351063932946,-0.0004329187871708464,-0.000139793754350268,0.00015301830864890978,0.00040658073928155863,0.0005912973826092432,0.0007182983870192952,0.005268192337562809,-3.759476365311686e-05
//};
// FIRFilter interpol_filter(interpol_imp_resp, 251);

DataProcessor::DataProcessor(int osc_freq, QObject* parent)
    : QObject(parent), oscill_freq(osc_freq) {
  samples_delay_line = new StrictRingBuffer(10);
}

void DataProcessor::setBuffer(StrictRingBuffer* buffer) {
  this->buffer = buffer;
  trigger_buf = new short[buffer->get_capacity()];
  before_trigger_buffer = new StrictRingBuffer(buffer->get_capacity());
}

void DataProcessor::writePacketToBuf(short* packet, int length) {
  if (!is_paused) {
    //      short output[length];
    //      low_pass.filter(packet, length, output);
    //      for (int i = 0; i < length; i++) {
    //          buffer->write_or_rewrite(output[i]);
    //      }
    //      short input[8 * length];
    //      short output[8 * length];
    //      std::fill(input, input + 8 * length, 0);
    //      for (int i = 0; i < length; i++) {
    //          input[i * 8] = packet[i];
    //      }
    //      interpol_filter.filter(input, 8 * length,output);

    //      apply_trigger(packet, length);

    if (!paused_after_trigger) {
      if (trigger_enabled) {
        apply_trigger(packet, length);
      } else {
        for (int i = 0; i < length; i++) {
          buffer->write_or_rewrite(packet[i]);
          samples_delay_line->write_or_rewrite(packet[i]);
          before_trigger_buffer->write_or_rewrite(packet[i]);
        }
      }
    } else {
      for (int i = 0; i < length; i++) {
        samples_delay_line->write_or_rewrite(packet[i]);
        before_trigger_buffer->write_or_rewrite(packet[i]);
      }
    }
  }
}

void DataProcessor::toggle_trigger() {
  if (trigger_enabled) {
    paused_after_trigger = false;
  }
  trigger_enabled = !trigger_enabled;
}

void DataProcessor::set_trigger_level(int trig_lvl) {
  trigger_level = trig_lvl;
}

void DataProcessor::change_trigger_mode(int mode_index) {
  switch (mode_index) {
    case 0:
      continuous_trigger_enabled = true;
      paused_after_trigger = false;
      break;
    case 1:
      continuous_trigger_enabled = false;
      break;
  }
}

void DataProcessor::set_trigger_offset(int offset) {
  trigger_offset_in_samples = offset;
}
/*
 * в эту функцию поступают отсчёты и если триггер включен и условия его
 * срабатывания были удовлетворены ранее или одним из полученных отчетов, то все
 * приходящие отчеты кладутся в буффер, до его полного заполнения
 */
void DataProcessor::apply_trigger(short* samples, int samples_num) {
  if (trigger_enabled) {
    int i = 0;
    while (!collecting_is_started && i < samples_num) {
      if (is_triggered(samples[i])) {
        collecting_is_started = true;
      } else {
        samples_delay_line->write_or_rewrite(samples[i]);
        before_trigger_buffer->write_or_rewrite(samples[i++]);
      }
    }

    if (collecting_is_started) {
      //        кладём сэмплы начиная с номера i в trigger_buf пока не наберём
      //        need_to_collect сэмплов

      int need_to_collect = buffer->get_capacity() - trigger_offset_in_samples;

      while (i < samples_num && samples_collected < need_to_collect) {
        samples_delay_line->write_or_rewrite(samples[i]);
        trigger_buf[samples_collected++] = samples[i++];
      }

      if (samples_collected == need_to_collect) {
        //перекладываем сэмплы из before and trig буферов в основной buffer
        collecting_is_started = false;
        samples_collected = 0;
        if (!continuous_trigger_enabled) {
          paused_after_trigger = true;
        }

        int start_ind = before_trigger_buffer->get_w_index() -
                        trigger_offset_in_samples +
                        before_trigger_buffer->get_capacity();

        for (int i = 0; i < trigger_offset_in_samples; i++) {
          buffer->write_or_rewrite(
              before_trigger_buffer->peekAt(start_ind + i));
          //          qDebug() << i << ", " <<
          //          before_trigger_buffer->peekAt(start_ind + i);
        }
        //        qDebug() << "++++++++++++++++";
        for (int i = 0; i < need_to_collect; i++) {
          buffer->write_or_rewrite(trigger_buf[i]);
          //          qDebug() << i + trigger_offset_in_samples << ", " <<
          //          trigger_buf[i];
        }
        //        qDebug() << "------------------------------";

        if (i < samples_num) {
          //#2
          //положим весь trig_buf и оставшиеся в пакете сэмплы в
          // before_trig_buffer
          for (int j = 0; j < need_to_collect; j++) {
            before_trigger_buffer->write_or_rewrite(trigger_buf[j]);
          }
          while (i < samples_num) {
            //не забыть про обновление delay_line сэмплами из остатка пакета
            samples_delay_line->write_or_rewrite(samples[i]);
            before_trigger_buffer->write_or_rewrite(samples[i]);
            i++;
          }
          return;
        } else {
          //#3 пакет закончился, trig_buf набрал достаточно - никакой доп
          //обработки не требуется
          return;
        }
      } else {
        //#1 пакет закончился, но в trig_buf еще собрано не достаточно. доп
        //обработка не требуется
        return;
      }
    }
  }
}

bool DataProcessor::is_triggered(short sample) {
  short old = samples_delay_line->peekAt(samples_delay_line->get_w_index());
  bool res = old < trigger_level && sample > trigger_level;
  //  samples_delay_line->write_or_rewrite(sample);
  if (res) {
    //    qDebug() << sample;
  }
  return res;
}

void DataProcessor::apply_continuous_trigger(short* samples, int samples_num) {
  if (continuous_trigger_enabled) {
    apply_trigger(samples, samples_num);
  }
}

void DataProcessor::set_is_paused_true() {
  is_paused = true;
}

void DataProcessor::set_is_paused_false() {
  is_paused = false;
  paused_after_trigger = false;
}
